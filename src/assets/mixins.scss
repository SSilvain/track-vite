@function toRem($px, $current: 16) {
	$result: math.div($px, $current) + rem;
	@return $result;
}

@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

@mixin av($property,
	$startValueProperty,
	$endValueProperty,
	$holdValueBeforeStart: "on",
	$holdValueAfterEnd: "on",
	$startPointAdaptive: $minWidth,
	$endPointAdaptive: $containerWidth) {

	@if ($endValueProperty==0) {
		$endValueProperty: 0.000001;
	}

	@if ($startValueProperty==0) {
		$startValueProperty: 0.000001;
	}

	$addSize: math.div($endValueProperty - $startValueProperty, 16);

	@if ($endPointAdaptive ==$containerWidth and $maxWidthContainer ==0) {
		$endPointAdaptive: $maxWidth;
	}

	// https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($endValueProperty - $startValueProperty), ($endPointAdaptive - $startPointAdaptive));
	$yIntersection: -$startPointAdaptive * $slope + $startValueProperty;

	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}

	$flyValue: #{toRem($yIntersection)}" + "#{$slope * 100}vw;

	$propertyValue: #{"clamp(" toRem($startValueProperty) "," $flyValue "," toRem($endValueProperty) ")"};

	@if ($startValueProperty > $endValueProperty) {
		$propertyValue: #{"clamp(" toRem($endValueProperty) "," $flyValue "," toRem($startValueProperty) ")"};
	}

	@if ($holdValueAfterEnd =="on") {
		@media (min-width: em($endPointAdaptive)) {
			#{$property}: toRem($endValueProperty);
		}
	}

	@media (min-width: em($startPointAdaptive)) and (max-width: em($endPointAdaptive)) {

		@supports (#{$property}: $propertyValue) {
			#{$property}: $propertyValue;
		}

		@supports not (#{$property}: $propertyValue) {
			#{$property}: calc(#{toRem($startValueProperty)} + #{$addSize} * (100vw - #{toRem($startPointAdaptive)}) / #{math.div($endPointAdaptive, 16) - math.div($startPointAdaptive, 16)});
		}
	}

	@if ($holdValueBeforeStart =="on") {
		@media (max-width: em($startPointAdaptive)) {
			#{$property}: toRem($startValueProperty);
		}
	}
}